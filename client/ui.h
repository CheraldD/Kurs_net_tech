/** @file
* @author Солдатенков А.Д.
* @version 1.0
* @date 23.02.2025
* @copyright ИБСТ ПГУ
* @brief Заголовочный файл модуля UI
*/
#pragma once
#include <boost/program_options.hpp>
#include <boost/filesystem.hpp>
#include <iostream>
#include <string>
#include <vector>
#include <arpa/inet.h>
#include "show_error.h"
namespace po = boost::program_options;
/** 
 * @class UI
 * @brief Класс для обработки аргументов командной строки, проверки входных данных и работы с настройками.
 * 
 * Данный класс предназначен для анализа параметров командной строки, проверки корректности введенных данных,
 * а также получения необходимых данных из комстроки.
 */
class UI{
    public:
        show_error debugger; ///< Объект для вывода информации об ошибках.
        po::options_description desc; ///< Описание доступных опций командной строки.
        po::variables_map vm; ///< Хранение значений параметров командной строки.
        
        /**
         * @brief Конструктор класса UI.
         * 
         * Инициализирует объект, обрабатывает параметры командной строки
         * и проверяет наличие всех необходимых параметров.
         * 
         * @param argc Количество аргументов командной строки.
         * @param argv Массив аргументов командной строки.
         */
        UI(int argc, char* argv[]);
        
        /**
         * @brief Геттер порта сервера
         * 
         * Проверяет корректность введенного порта, чтобы он находился в диапазоне 1024-65535.
         * В случае ошибки выводит сообщение об ошибке.
         * 
         * @return Номер порта, либо 1 в случае ошибки.
         */
        uint get_port();
        
        /**
         * @brief Функция для проверки корректности пути к файлу
         * 
         * Проверяет, существует ли указанный файл, не является ли он папкой, доступен ли для чтения,
         * а также не является ли символьной ссылкой.
         * 
         * @param path Путь к файлу.
         * @param function Название функции, вызвавшей проверку (для вывода информации об ошибке).
         * @return Абсолютный путь к файлу или пустая строка в случае ошибки.
         */
        std::string check_path(std::string path,std::string function);
        
        /**
         * @brief Геттер IP сервера
         * 
         * Проверяет, что введенный IP-адрес соответствует формату IPv4.
         * В случае ошибки выводит сообщение об ошибке.
         * 
         * @return Строка с IP-адресом или пустая строка в случае ошибки.
         */
        std::string get_serv_ip();
        
        /**
         * @brief Геттер пути к файлу с входными данными
         * 
         * Выполняется проверка с помощью check_path()
         * 
         * @return Строка с абсолютным путем к файлу с входными данными или пустая строка в случае ошибки.
         */
        std::string get_in_file_location();
        
        /**
         * @brief Геттер пути к файлу с файлом для выходных данных
         * 
         * Выполняется проверка с помощью check_path()
         * 
         * @return Строка с абсолютным путем к файлу для выходных данных или пустая строка в случае ошибки.
         */
        std::string get_out_file_location();
        
        /**
         * @brief Получить путь к файлу с персональными данными пользователя.
         * 
         * Выполняется проверка с помощью check_path()
         * 
         * @return Строка с абсолютным путем к файлу или пустая строка в случае ошибки.
         */
        std::string get_user_data_location();
};