/** @file
 * @author –°—Ç—Ä–∏–≥–∏–Ω –ê.–í.
 * @version 1.0
 * @date 23.12.2023
 * @copyright –ò–ë–°–¢ –ü–ì–£
 * @brief –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –¥–ª—è –º–æ–¥—É–ª—è communicator*/
#include "communicator.h"

int communicator::connect_to_cl()
{
    if (listen(serverSocket, 10) == 0)
    {
        std::cout << "–°–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç..." << std::endl;
        log.write_log(log_location, "–†–∞–±–æ—Ç–∞ –º–æ–¥—É–ª—è: communicator. –°–µ—Ä–≤–µ—Ä –≤—Å—Ç–∞–ª –Ω–∞ –ø—Ä–æ—Å–ª—É—à–∫—É –ø–æ—Ä—Ç–∞");
    }
    else
    {
        log.write_log(log_location, "–†–∞–±–æ—Ç–∞ –º–æ–¥—É–ª—è: communicator. –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–∏ –ø–æ—Ä—Ç–∞");
        std::cout << "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–∏" << std::endl;
        throw critical_error("–°–µ–≤–µ—Ä –Ω–µ –≤—Å—Ç–∞–ª –Ω–∞ –ø—Ä–æ—Å–ª—É—à–∫—É –ø–æ—Ä—Ç–∞");
    }
    addr_size = sizeof(clientAddr);
    clientSocket = accept(serverSocket, (struct sockaddr *)&clientAddr, &addr_size);
    if (clientSocket < 0)
    {
        log.write_log(log_location, "–†–∞–±–æ—Ç–∞ –º–æ–¥—É–ª—è: communicator. –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –æ—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞");
        std::cout << "–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞" << std::endl;
        close(clientSocket);
    }
    else
    {
        log.write_log(log_location, "–†–∞–±–æ—Ç–∞ –º–æ–¥—É–ª—è: communicator. –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
        std::cout << "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" << std::endl;
    }
    cl_id = recv_data("–†–∞–±–æ—Ç–∞ –º–æ–¥—É–ª—è: communicator. –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–µ–º–µ –∞–π–¥–∏ –∫–ª–∏–µ–Ω—Ç–∞");
    std::string operation_type = recv_data("–û—à–∏–±–∫–∞ –ø—Ä–∏–µ–º–∞ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏");
    std::chrono::milliseconds duration(10);
    std::this_thread::sleep_for(duration);
    std::cout << "–ü–æ–ª—É—á–µ–Ω —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: " << operation_type << std::endl;
    if (operation_type == "0") {
        registration(cl_id);
        return 0;
    }
    else{
        if(authentification(cl_id)==0){
            return 0;
        }
        std::cout << "–ü–æ–¥—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + cl_id << std::endl;
    }
    return 1;
}
int communicator::authentification(std::string cl_id){
    if(db.selectUserByName(cl_id)==0){
        close_sock();
        return 0;
    }
    std::string cl_passw_base=db.getCurrentHashedPassword();
    std::string cl_ip_base=db.getCurrentIP();
    std::chrono::milliseconds duration(10);
    std::this_thread::sleep_for(duration);
    std::string cl_passw_recv = recv_data("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–µ–º–µ –ø–∞—Ä–æ–ª—è");
    std::this_thread::sleep_for(duration);
    std::string cl_ip_recv = recv_data("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–µ–º–µ –∞–π–ø–∏");
    if(cl_passw_base!=cl_passw_recv){
        close_sock();
        std::cout<<"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∫–ª–∏–µ–Ω—Ç–∞"<<std::endl;
        return 0;
    }
    if(cl_ip_base!=cl_ip_recv){
        close_sock();
        std::cout<<"–ù–µ–≤–µ—Ä–Ω—ã–π –ê–π–ø–∏ –∫–ª–∏–µ–Ω—Ç–∞"<<std::endl;
        return 0;
    }
    return 1;
}
void communicator::registration(std::string cl_id){
    std::string password = recv_data("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–µ–º–µ –ø–∞—Ä–æ–ª—è");
    char client_ip_cstr[INET_ADDRSTRLEN];
    inet_ntop(AF_INET, &(clientAddr.sin_addr), client_ip_cstr, INET_ADDRSTRLEN);
    std::string client_ip_str = client_ip_cstr;
    db.insertUser(cl_id,password,client_ip_str);
    send_data("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞","–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è");
    close_sock();
}
communicator::communicator(uint port, std::string base_loc, std::string log_loc)
{
    p = port;
    base_location = base_loc;
    log_location = log_loc;
}
void communicator::work()
{
    start();
    while(true){
    if(connect_to_cl()==0){
        continue;
    }
    send_file_list();
    if(file_exchange()==1){
        continue;
    }
    }
}
void communicator::start(){
    serverSocket = socket(AF_INET, SOCK_STREAM, 0);
    if (serverSocket < 0)
    {
        perror("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–∫–µ—Ç–∞");
        log.write_log(log_location, "–†–∞–±–æ—Ç–∞ –º–æ–¥—É–ª—è: communicator. –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–∫–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞");
        throw critical_error("–°–æ–∫–µ—Ç –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω");
    }
    log.write_log(log_location, "–†–∞–±–æ—Ç–∞ –º–æ–¥—É–ª—è: communicator. –°–æ–∫–µ—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω");
    std::cout << "–°–æ–∫–µ—Ç —Å–æ–∑–¥–∞–Ω" << std::endl;
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(p);
    serverAddr.sin_addr.s_addr = INADDR_ANY;

    if (bind(serverSocket, (struct sockaddr *)&serverAddr, sizeof(serverAddr)) < 0)
    {
        perror("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ —Å–æ–∫–µ—Ç–∞");
        log.write_log(log_location, "–†–∞–±–æ—Ç–∞ –º–æ–¥—É–ª—è: communicator. –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ —Å–æ–∫–µ—Ç–∞");
        throw critical_error("–°–æ–∫–µ—Ç –Ω–µ –±—ã–ª –ø—Ä–∏–≤—è–∑–∞–Ω");
    }
    log.write_log(log_location, "–†–∞–±–æ—Ç–∞ –º–æ–¥—É–ª—è: communicator. C–æ–∫–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω");
    std::cout << "–°–æ–∫–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω" << std::endl;
}
int communicator::file_exchange(){
    while (true)
    {
        std::string path=recv_data("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø—É—Ç–∏ –∫ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–º—É —Ñ–∞–π–ª—É");
        if (path==""){
            break;
            std::cout<<"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–µ–º–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"<<std::endl;
            return 1;
        }
        if(send_file(path)==1){
            break;
            std::cout<<"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –∫–ª–∏–µ–Ω—Ç—É"<<std::endl;
            return 1;
        }
    }
    return 0;
}
std::string communicator::recv_data(std::string messg)
{
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –æ–¥–∏–Ω —Ä–∞–∑
    timeout.tv_sec = 10;
    timeout.tv_usec = 0;
    setsockopt(clientSocket, SOL_SOCKET, SO_RCVTIMEO, (char*)&timeout, sizeof(timeout));

    int rc = 0;
    size_t peek_buflen = buflen;
    std::vector<char> temp_buffer(peek_buflen);

    // üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Å—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    while (true)
    {
        rc = recv(clientSocket, temp_buffer.data(), peek_buflen, MSG_PEEK);
        
        if (rc == 0)
        {
            close_sock();
            log.write_log(log_location, "–ö–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ");
            return "";
        }
        else if (rc < 0)
        {
            close_sock();
            log.write_log(log_location, messg);
            return "";
        }

        if (static_cast<size_t>(rc) < peek_buflen)
            break;

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±—É—Ñ–µ—Ä, –µ—Å–ª–∏ –≤–µ—Å—å –∑–∞–±–∏—Ç
        peek_buflen *= 2;
        temp_buffer.resize(peek_buflen);
    }

    // üß† –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—É—Ñ–µ—Ä–∞, —Å—á–∏—Ç—ã–≤–∞—è —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    std::string msg(temp_buffer.data(), rc);
    if (recv(clientSocket, nullptr, rc, MSG_TRUNC) <= 0)
    {
        close_sock();
        log.write_log(log_location, messg);
        return "";
    }

    std::cout << "–°—Ç—Ä–æ–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: " << msg << std::endl;
    return msg;
}


void communicator::send_data(std::string data, std::string msg)
{
    std::chrono::milliseconds duration(10);
    std::unique_ptr<char[]> temp{new char[data.length() + 1]};
    strcpy(temp.get(), data.c_str());
    buffer = std::move(temp);
    std::this_thread::sleep_for(duration);
    int sb = send(clientSocket, buffer.get(), data.length(), 0);
    if (sb <= 0)
    {
        log.write_log(log_location, msg);
        close_sock();
    }
}
void communicator::close_sock()
{
    close(clientSocket);
    log.write_log(log_location, "–†–∞–±–æ—Ç–∞ –º–æ–¥—É–ª—è communicator. –†–∞–∑–æ—Ä–≤–∞–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º");
}
void communicator::send_file_list()
{
    std::chrono::milliseconds duration(10);
    data_handler handler;
    std::vector<std::string> files = handler.get_file_list();
    if (files.empty()) {
        std::cerr << "–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–∫—Ç–æ—Ä–∞: —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø—É—Å—Ç!" << std::endl;
        return;
    }
    
    uint32_t vector_size = htonl(files.size()); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ—Ä—è–¥–æ–∫ –±–∞–π—Ç–æ–≤
    std::this_thread::sleep_for(duration);
    if (send(clientSocket, &vector_size, sizeof(vector_size), 0) <= 0) {
        close_sock();
        std::cerr << "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –≤–µ–∫—Ç–æ—Ä–∞" << std::endl;
        return;
    }
    
    for (const auto& file : files) {
        uint32_t length = htonl(file.size());
        
        std::this_thread::sleep_for(duration);
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
        if (send(clientSocket, &length, sizeof(length), 0) <= 0) {
            close_sock();
            std::cerr << "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏" << std::endl;
            return;
        }
        std::this_thread::sleep_for(duration);
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º—É —Å—Ç—Ä–æ–∫—É
        if (send(clientSocket, file.c_str(), file.size(), 0) <= 0) {
            close_sock();
            std::cerr << "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∏" << std::endl;
            return;
        }
    }
}
int communicator::send_file(std::string &file_path)
{
    if (!boost::filesystem::exists(file_path))
    {
        std::cout << "–¢–∞–∫–æ–≥–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" << std::endl;
        close_sock();
        return 1;
    }

    std::ifstream file(file_path, std::ios::binary | std::ios::ate);
    if (!file)
    {
        std::cerr << "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞!" << std::endl;
        close_sock();
        return 1;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    std::streamsize file_size = file.tellg();
    file.seekg(0, std::ios::beg);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8 –±–∞–π—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ int64_t)
    int64_t size_net = htobe64(static_cast<int64_t>(file_size));
    if (send(clientSocket, &size_net, sizeof(size_net), 0) <= 0)
    {
        std::cerr << "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞!" << std::endl;
        close_sock();
        return 1;
    }

    constexpr size_t BUFFER_SIZE = 65536;
    std::vector<char> buffer(BUFFER_SIZE);

    int total_bytes_sent = 0;
    int i = 0;

    while (file)
    {
        file.read(buffer.data(), BUFFER_SIZE);
        std::streamsize bytes_read = file.gcount();
        if (bytes_read <= 0) break;

        int bytes_sent = 0;
        while (bytes_sent < bytes_read)
        {
            std::chrono::milliseconds duration(10);
            std::this_thread::sleep_for(duration);
            int sent = send(clientSocket, buffer.data() + bytes_sent, bytes_read - bytes_sent, 0);
            if (sent <= 0)
            {
                std::cerr << "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö!" << std::endl;
                close_sock();
                file.close();
                return 1;
            }
            bytes_sent += sent;
        }

        total_bytes_sent += bytes_sent;
        std::cout << "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–ª–æ–∫ #" << ++i << ", —Ä–∞–∑–º–µ—Ä: " << bytes_sent << " –±–∞–π—Ç" << std::endl;
    }

    file.close();
    std::cout << "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: " << total_bytes_sent << " –±–∞–π—Ç" << std::endl;
    return 0;
}


std::string communicator::hash_gen(std::string &password) {
    CryptoPP::SHA256 hash;
    std::string hashed_password;

    CryptoPP::StringSource(password, true,
        new CryptoPP::HashFilter(hash,
            new CryptoPP::HexEncoder(
                new CryptoPP::StringSink(hashed_password)
            )
        )
    );

    return hashed_password;
}